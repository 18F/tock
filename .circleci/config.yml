# Python CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-python/ for more details
#
cf-docker-image: &CF_DOCKER_IMAGE
  docker:
    - image: 18fgsa/cloud-foundry-cli
      environment:
        - TZ=America/New_York
        - CF_API: https://api.fr.cloud.gov
working-directory: &WORKING_DIRECTORY
  working_directory: ~/repo


version: 2
jobs:
  build:
    docker:
      # specify the version you desire here
      # use `-browsers` prefix for selenium tests, e.g. `3.6.1-browsers`
      - image: circleci/python:3.6.4-jessie-node-browsers
        environment:
          - TZ=America/New_York
          - PIPENV_VENV_IN_PROJECT=true

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      - image: circleci/postgres:9.6.6
        environment:
          - POSTGRES_USER=circleci
          - POSTGRES_DB=tock-test

    <<: *WORKING_DIRECTORY

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            pip install pipenv
            pipenv install --dev --deploy
            npm install

      - save_cache:
          paths:
            - ./.venv
            - ./node_modules
          key: v1-dependencies-{{ checksum "Pipfile" }}-{{ checksum "Pipfile.lock" }}-{{ checksum "package.json" }}

      # run tests!
      - run:
          name: run tests
          command: |
            . .venv/bin/activate
            npm run build-css
            cd tock
            python manage.py migrate --noinput --settings=tock.settings.test
            python manage.py test --noinput --settings=tock.settings.test
            bandit -r . -x docker_entrypoint.py
            flake8
            pipenv check --dev
            codecov

      - store_artifacts:
          path: test-reports
          destination: test-reports

      - persist_to_workspace:
          root: .
          paths:
            - ./*

  deploy_to_staging:
    <<: *CF_DOCKER_IMAGE

    <<: *WORKING_DIRECTORY

    steps:
      - attach_workspace:
          at: .
      - run:
          name: Login to cloud.gov Staging
          command: cf login -a ${CF_API} -u ${CF_DEPLOYER_USERNAME_STAGING} -p ${CF_DEPLOYER_PASSWORD_STAGING}
      - run:
          name: Save version to file system
          command: echo ${CIRCLE_SHA1} > tock/VERSION
      - run:
          name: deploy Tock Staging to cloud.gov
          command: cf_deploy.sh tock gsa-18f-tock staging manifest-staging.yml

  deploy_to_production:
    <<: *CF_DOCKER_IMAGE

    <<: *WORKING_DIRECTORY

    steps:
      - attach_workspace:
          at: .
      - run:
          name: Login to cloud.gov Production
          command: cf login -a ${CF_API} -u ${CF_DEPLOYER_USERNAME_PRODUCTION} -p ${CF_DEPLOYER_PASSWORD_PRODUCTION}
      - run:
          name: Save version to file system
          command: echo ${CIRCLE_TAG} > tock/VERSION
      - run:
          name: Deploy Tock Production to cloud.gov
          command: cf_deploy.sh tock gsa-18f-tock prod manifest-production.yml

  recycle_production:
    <<: *CF_DOCKER_IMAGE

    <<: *WORKING_DIRECTORY

    steps:
      - run:
          name: Login to cloud.gov Production
          command: cf login -a ${CF_API} -u ${CF_DEPLOYER_USERNAME_PRODUCTION} -p ${CF_DEPLOYER_PASSWORD_PRODUCTION}
      - run:
          name: Install cf-recycle-plugin 1.0.0 release
          command: |
            curl -o cf-recycle-plugin https://github.com/rogeruiz/cf-recycle-plugin/releases/download/v1.0.0/cf-recycle-plugin.linux64
            cf install-plugin cf-recycle-plugin -f
      - run:
          name: Recycle Tock Production instances
          command: cf recycle tock

workflows:
  version: 2
  build_pull_requests:
    jobs:
      - build:
          filters:
            branches:
              only: /.*/
  build_and_deploy_staging:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - deploy_to_staging:
          requires:
            - build
          filters:
            branches:
              only: master
  build_and_deploy_production:
    jobs:
      - build:
          filters:
            tags:
              only: /v20[1-9][0-9][0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
      - deploy_to_production:
          requires:
            - build
          filters:
            tags:
              only: /v20[1-9][0-9][0-9]+\.[0-9]+/
            branches:
              ignore: /.*/
  recycle-prod:
    jobs:
      - recycle_production
    triggers:
    - schedule:
        cron: "0 10 * * *"  # Roughly 5am ET
